services:
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.openjdk
      args:
        JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS:-}
    image: edc-dev-jdk
    pull_policy: never
    container_name: consumer
    restart: on-failure
    command:
      [
        java,
        -Dedc.fs.config=/opt/src/dev-config/dev-consumer.properties,
        -Dedc.keystore=/opt/src/dev-config/certs-consumer/cert.pfx,
        -Dedc.keystore.password=datacellar,
        -Dedc.vault=/opt/src/dev-config/certs-consumer/vault.properties,
        -jar,
        /opt/src/connector/openapi-connector/build/libs/openapi-connector.jar,
      ]
    ports:
      - 29191:29191
      - 29193:29193
      - 29194:29194
      - 29291:29291
      - 29192:29192
    volumes:
      - .:/opt/src
    extra_hosts:
      - host.docker.internal:host-gateway
  consumer_backend:
    build:
      context: .
      dockerfile: Dockerfile.edcpy
    image: edc-dev-edcpy
    pull_policy: never
    container_name: consumer_backend
    restart: on-failure
    command: [run-http-backend]
    volumes:
      - .:/opt/src
    environment:
      # The public key of the provider is needed to verify the signature of the JWT
      EDC_CERT_PATH: /opt/src/dev-config/certs-provider/cert.pem
      # trunk-ignore(checkov/CKV_SECRET_4)
      EDC_RABBIT_URL: amqp://guest:guest@consumer_broker:5672
      EDC_HTTP_API_PORT: 28000
      API_AUTH_KEY: ${API_AUTH_KEY:-}
    ports:
      - 28000:28000
    extra_hosts:
      - host.docker.internal:host-gateway
  consumer_broker:
    image: rabbitmq:3.11-management
    container_name: consumer_broker
    restart: on-failure
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    extra_hosts:
      - host.docker.internal:host-gateway
  provider:
    build:
      context: .
      dockerfile: Dockerfile.openjdk
      args:
        JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS:-}
    image: edc-dev-jdk
    pull_policy: never
    container_name: provider
    restart: on-failure
    environment:
      BACKEND_API_KEY: ${BACKEND_API_KEY:-}
    command:
      [
        java,
        -Dedc.fs.config=/opt/src/dev-config/dev-provider.properties,
        -Dedc.vault=/opt/src/dev-config/certs-provider/vault.properties,
        -Dedc.keystore=/opt/src/dev-config/certs-provider/cert.pfx,
        -Dedc.keystore.password=datacellar,
        -jar,
        /opt/src/connector/openapi-connector/build/libs/openapi-connector.jar,
      ]
    ports:
      - 19191:19191
      - 19193:19193
      - 19194:19194
      - 19291:19291
      - 19192:19192
    volumes:
      - .:/opt/src
    extra_hosts:
      - host.docker.internal:host-gateway
  issuer:
    image: waltid/issuer-api:1.0.2409230658-SNAPSHOT
    container_name: issuer
    restart: on-failure
    ports:
      - 7002:7002
    volumes:
      - ./dev-config/waltid/issuer:/waltid-issuer-api/config
    extra_hosts:
      - host.docker.internal:host-gateway
  verifier:
    image: waltid/verifier-api:1.0.2409230658-SNAPSHOT
    container_name: verifier
    restart: on-failure
    ports:
      - 7003:7003
    volumes:
      - ./dev-config/waltid/verifier:/waltid-verifier-api/config
    extra_hosts:
      - host.docker.internal:host-gateway
  consumer_wallet:
    image: waltid/wallet-api:1.0.2409230658-SNAPSHOT
    container_name: consumer_wallet
    restart: on-failure
    ports:
      - 7001:7001
    volumes:
      - consumer_wallet_data:/waltid-wallet-api/data
      - ./dev-config/waltid/wallet-consumer:/waltid-wallet-api/config
    extra_hosts:
      - host.docker.internal:host-gateway
  anchor_wallet:
    image: waltid/wallet-api:1.0.2409230658-SNAPSHOT
    container_name: anchor_wallet
    restart: on-failure
    ports:
      - 7051:7001
    volumes:
      - anchor_wallet_data:/waltid-wallet-api/data
      - ./dev-config/waltid/wallet-anchor:/waltid-wallet-api/config
    extra_hosts:
      - host.docker.internal:host-gateway
  provider_wallet:
    image: waltid/wallet-api:1.0.2409230658-SNAPSHOT
    container_name: provider_wallet
    restart: on-failure
    ports:
      - 7061:7001
    volumes:
      - provider_wallet_data:/waltid-wallet-api/data
      - ./dev-config/waltid/wallet-provider:/waltid-wallet-api/config
    extra_hosts:
      - host.docker.internal:host-gateway
  consumer_postgres:
    image: postgres:14
    container_name: consumer_postgres
    restart: on-failure
    ports:
      - 25432:5432
    environment:
      POSTGRES_DB: connector
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - consumer_postgres_data:/var/lib/postgresql/data
      - ./dev-config/sql-store-schemas/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [CMD-SHELL, pg_isready -U postgres]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  provider_postgres:
    image: postgres:14
    container_name: provider_postgres
    restart: on-failure
    ports:
      - 15432:5432
    environment:
      POSTGRES_DB: connector
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - provider_postgres_data:/var/lib/postgresql/data
      - ./dev-config/sql-store-schemas/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [CMD-SHELL, pg_isready -U postgres]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
volumes:
  consumer_wallet_data: {}
  anchor_wallet_data: {}
  provider_wallet_data: {}
  consumer_postgres_data: {}
  provider_postgres_data: {}
