# https://taskfile.dev

version: "3"

env:
  MAIN_IP_ADDRESS:
    sh: ip route get 1.2.3.4 | awk '{print $7}'
  CONNECTOR_DIR: connector
  SCRIPTS_IMAGE: edc-poc-scripts
  EDCPY_IMAGE: edcpy
  EXAMPLE_CONSUMER_CERTS_DIR: "{{.ROOT_DIR}}/dev-config/certs-consumer"
  EXAMPLE_PROVIDER_CERTS_DIR: "{{.ROOT_DIR}}/dev-config/certs-provider"
  KEY_ALIAS: datacellar
  KEY_PASSW: datacellar
  BOX_EDC_VENV: $HOME/edc-venv

tasks:
  clean:
    desc: Performs cleanup by removing generated artifacts, including files, directories, and containers resulting from task execution
    cmds:
      - docker compose -f {{.ROOT_DIR}}/docker-compose-consumer.yml down -v
      - docker compose -f {{.ROOT_DIR}}/docker-compose-provider.yml down -v
      - docker compose -f {{.ROOT_DIR}}/docker-compose-dev.yml down -v
      - docker compose -f {{.ROOT_DIR}}/mock-backend/docker-compose.yml down -v
      - rm -fr {{.EXAMPLE_CONSUMER_CERTS_DIR}}
      - rm -fr {{.EXAMPLE_PROVIDER_CERTS_DIR}}
      - cd {{.CONNECTOR_DIR}} && gradle clean
      - cmd: docker rmi -f {{.SCRIPTS_IMAGE}}
        ignore_error: true
      - cmd: docker rmi -f {{.EDCPY_IMAGE}}
        ignore_error: true

  build-scripts-image:
    desc: Builds the Docker image used to run helper scripts
    dir: scripts
    cmds:
      - docker build -t {{.SCRIPTS_IMAGE}} .

  build-connector:
    desc: Builds the connector
    dir: "{{.CONNECTOR_DIR}}"
    vars:
      SKIP_CLEAN: '{{default "" .SKIP_CLEAN}}'
    env:
      # Set the property that signals the connector to use OAuth 2 identity
      # https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
      ORG_GRADLE_PROJECT_useOauthIdentity: "false"
    cmds:
      - gradle {{if eq .SKIP_CLEAN ""}}clean{{end}} build

  build-edcpy-image:
    desc: Builds the Docker image that contains the EDC Python SDK
    cmds:
      - docker build -t {{.EDCPY_IMAGE}} -f Dockerfile.edcpy .

  create-certs:
    deps:
      - build-scripts-image
    requires:
      vars: [CERTS_DIR]
    cmds:
      - mkdir -p {{.CERTS_DIR}}
      - >
        docker run --rm
        -v {{.CERTS_DIR}}:/out
        {{.SCRIPTS_IMAGE}}
        /bin/bash -c "OUT_DIR=/out KEY_ALIAS={{.KEY_ALIAS}} KEY_PASSW={{.KEY_PASSW}} ./create-certs.sh"
    status:
      - test -f {{.CERTS_DIR}}/*.pfx

  create-example-certs-consumer:
    desc: Creates the certificates used by the example consumer
    cmds:
      - task: create-certs
        vars:
          CERTS_DIR: "{{.EXAMPLE_CONSUMER_CERTS_DIR}}"

  create-example-certs-provider:
    desc: Creates the certificates used by the example provider
    cmds:
      - task: create-certs
        vars:
          CERTS_DIR: "{{.EXAMPLE_PROVIDER_CERTS_DIR}}"

  provision-example-provider:
    desc: Provisions the example Provider
    cmds:
      - task: create-example-certs-provider
      - >
        docker compose
        -f {{.ROOT_DIR}}/mock-backend/docker-compose.yml
        up -d --build --wait
      - >
        docker compose
        -f {{.ROOT_DIR}}/docker-compose-provider.yml
        up -d --build --wait

  provision-example-consumer:
    desc: Provisions the example Consumer
    cmds:
      - task: create-example-certs-consumer
      - >
        docker compose
        -f {{.ROOT_DIR}}/docker-compose-consumer.yml
        up -d --build --wait

  provision-example-virtualenv:
    desc: Provisions the virtual environment for the EDC Python SDK
    cmds:
      - rm -fr {{.BOX_EDC_VENV}}
      - virtualenv {{.BOX_EDC_VENV}}
      - "{{.BOX_EDC_VENV}}/bin/pip install --upgrade pip"
      - "{{.BOX_EDC_VENV}}/bin/pip install --upgrade {{.ROOT_DIR}}/edcpy"
    status:
      - test -f {{.BOX_EDC_VENV}}/bin/python

  run-pull-example-from-consumer:
    desc: Runs the Consumer Pull example script from the consumer box
    deps:
      - provision-example-virtualenv
    dotenv: ["{{.ROOT_DIR}}/dev-config/.env.box.consumer"]
    cmds:
      - "{{.BOX_EDC_VENV}}/bin/python {{.ROOT_DIR}}/example/example_pull.py"

  run-push-example-from-consumer:
    desc: Runs the Provider Push example script from the consumer box
    deps:
      - provision-example-virtualenv
    dotenv: ["{{.ROOT_DIR}}/dev-config/.env.box.consumer"]
    cmds:
      - "{{.BOX_EDC_VENV}}/bin/python {{.ROOT_DIR}}/example/example_push.py"

  dev-up:
    desc: Starts the development environment stack
    dotenv:
      - dev-config/.env.dev.wallets
    deps:
      - create-example-certs-consumer
      - create-example-certs-provider
    cmds:
      - docker compose -f {{.ROOT_DIR}}/mock-backend/docker-compose.yml up -d --build --wait
      - task: build-connector
        vars:
          SKIP_CLEAN: "true"
      - docker compose -f {{.ROOT_DIR}}/docker-compose-dev.yml up --force-recreate -d --build --wait

  dev-down:
    desc: Stops the development environment stack
    cmds:
      - docker compose -f {{.ROOT_DIR}}/docker-compose-dev.yml down -v
      - docker compose -f {{.ROOT_DIR}}/mock-backend/docker-compose.yml down -v

  dev-provision-wallets:
    dotenv:
      - dev-config/.env.dev.wallets
      - dev-config/.env.dev.wallets.local
    cmds:
      - python scripts/provision-wallets.py
