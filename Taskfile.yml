# https://taskfile.dev

version: "3"

env:
  CONNECTOR_DIR: connector
  SCRIPTS_IMAGE: edc-poc-scripts
  EDCPY_IMAGE: edcpy
  EXAMPLE_CONSUMER_CERTS_DIR: "{{.ROOT_DIR}}/example/certs-consumer"
  EXAMPLE_PROVIDER_CERTS_DIR: "{{.ROOT_DIR}}/example/certs-provider"
  KEY_ALIAS: datacellar
  KEY_PASSW: datacellar
  EXAMPLE_CONNECTOR_PROVIDER_ID: example-provider
  EXAMPLE_CONNECTOR_CONSUMER_ID: example-consumer
  EXAMPLE_KEYCLOAK_REALM: edc-example-realm

tasks:
  clean:
    desc: Performs cleanup by removing generated artifacts, including files, directories, and containers resulting from task execution
    cmds:
      - docker compose -f {{.ROOT_DIR}}/docker-compose-consumer.yml down -v
      - docker compose -f {{.ROOT_DIR}}/docker-compose-provider.yml down -v
      - rm -fr {{.ROOT_DIR}}/example/certs-*
      - rm -fr {{.ROOT_DIR}}/example/*.jar
      - cd {{.CONNECTOR_DIR}} && gradle clean
      - cmd: docker rmi -f {{.SCRIPTS_IMAGE}}
        ignore_error: true
      - cmd: docker rmi -f {{.EDCPY_IMAGE}}
        ignore_error: true

  build-scripts-image:
    desc: Builds the Docker image used to run helper scripts
    dir: scripts
    cmds:
      - docker build -t {{.SCRIPTS_IMAGE}} .

  build-connector:
    desc: Builds the connector
    dir: "{{.CONNECTOR_DIR}}"
    env:
      # Set the property that signals the connector to use OAuth 2 identity
      # https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
      ORG_GRADLE_PROJECT_useOauthIdentity: "false"
    cmds:
      - gradle clean build

  build-edcpy-image:
    desc: Builds the Docker image that contains the EDC Python SDK
    cmds:
      - docker build -t {{.EDCPY_IMAGE}} -f Dockerfile.edcpy .

  create-example-certs-consumer:
    desc: Creates the certificates used by the example consumer
    deps:
      - build-scripts-image
    cmds:
      - mkdir -p {{.EXAMPLE_CONSUMER_CERTS_DIR}}
      - >
        docker run --rm 
        -v {{.EXAMPLE_CONSUMER_CERTS_DIR}}:/out 
        {{.SCRIPTS_IMAGE}}
        /bin/bash -c "OUT_DIR=/out KEY_ALIAS={{.KEY_ALIAS}} KEY_PASSW={{.KEY_PASSW}} ./create-certs.sh"
    status:
      - test -f {{.EXAMPLE_CONSUMER_CERTS_DIR}}/*.pfx

  create-example-certs-provider:
    desc: Creates the certificates used by the example provider
    deps:
      - build-scripts-image
    cmds:
      - mkdir -p {{.EXAMPLE_PROVIDER_CERTS_DIR}}
      - >
        docker run --rm 
        -v {{.EXAMPLE_PROVIDER_CERTS_DIR}}:/out 
        {{.SCRIPTS_IMAGE}}
        /bin/bash -c "OUT_DIR=/out KEY_ALIAS={{.KEY_ALIAS}} KEY_PASSW={{.KEY_PASSW}} ./create-certs.sh"
    status:
      - test -f {{.EXAMPLE_PROVIDER_CERTS_DIR}}/*.pfx

  move-connector-jar:
    desc: Moves the connector JAR to the example directory
    deps:
      - build-connector
    cmds:
      - >
        cp -f 
        {{.ROOT_DIR}}/{{.CONNECTOR_DIR}}/core-connector/build/libs/core-connector.jar 
        {{.ROOT_DIR}}/example/

  create-keycloak-client-example-consumer:
    desc: Creates the OAuth2 client for the example consumer in Keycloak
    deps:
      - build-edcpy-image
      - create-example-certs-consumer
    cmds:
      - >
        docker run --rm 
        -v {{.EXAMPLE_CONSUMER_CERTS_DIR}}:/certs 
        -v /var/run/dbus:/var/run/dbus 
        -v /var/run/avahi-daemon/socket:/var/run/avahi-daemon/socket 
        {{.EDCPY_IMAGE}}
        configure-keycloak-connector 
        --connector-id {{.EXAMPLE_CONNECTOR_CONSUMER_ID}} 
        --connector-cert-path /certs/cert.pem 
        --keycloak-realm {{.EXAMPLE_KEYCLOAK_REALM}}

  create-keycloak-client-example-provider:
    desc: Creates the OAuth2 client for the example provider in Keycloak
    deps:
      - build-edcpy-image
      - create-example-certs-provider
    cmds:
      - >
        docker run --rm 
        -v {{.EXAMPLE_PROVIDER_CERTS_DIR}}:/certs 
        -v /var/run/dbus:/var/run/dbus 
        -v /var/run/avahi-daemon/socket:/var/run/avahi-daemon/socket 
        {{.EDCPY_IMAGE}}
        configure-keycloak-connector 
        --connector-id {{.EXAMPLE_CONNECTOR_PROVIDER_ID}} 
        --connector-cert-path /certs/cert.pem 
        --keycloak-realm {{.EXAMPLE_KEYCLOAK_REALM}}
