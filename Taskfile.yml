# https://taskfile.dev

version: "3"

env:
  DATA_DASHBOARD_COMMIT: c3ec34f
  DATA_DASHBOARD_DIR: data-dashboard
  MVD_COMMIT: 8141afc
  MVD_DIR: mvd
  MVD_UI_PATH: "{{.USER_WORKING_DIR}}/{{.DATA_DASHBOARD_DIR}}"
  DC_CONNECTOR_DIR: datacellar-connector
  DC_CERTS_DIR: datacellar-certs
  HTTP_PULL_NETWORK: edc_http_pull
  SCRIPTS_IMAGE: edc-poc-scripts
  EDCPY_IMAGE: edcpy
  HTTP_PULL_SERVICES_SLEEP: 5

tasks:
  clean:
    desc: Performs cleanup by removing generated artifacts, including files, directories, and containers resulting from task execution
    cmds:
      - cmd: docker compose --profile ui -f {{.MVD_DIR}}/system-tests/docker-compose.yml down -v
        ignore_error: true
      - docker compose -f docker-compose-http-pull.yml down -v
      - docker compose -f docker-compose-http-push.yml down -v
      - rm -fr {{.DATA_DASHBOARD_DIR}}
      - rm -fr {{.MVD_DIR}}
      - rm -fr {{.DC_CERTS_DIR}}
      - cd {{.DC_CONNECTOR_DIR}} && gradle clean
      - cmd: docker rmi -f {{.SCRIPTS_IMAGE}}
        ignore_error: true
      - cmd: docker rmi -f {{.EDCPY_IMAGE}}
        ignore_error: true

  clone-data-dashboard:
    desc: Clones the eclipse-edc/DataDashboard repository
    cmds:
      - git clone git@github.com:eclipse-edc/DataDashboard.git {{.DATA_DASHBOARD_DIR}}
      - cd {{.DATA_DASHBOARD_DIR}} && git reset --hard {{.DATA_DASHBOARD_COMMIT}}
    status:
      - test -d {{.DATA_DASHBOARD_DIR}}

  clone-mvd:
    desc: Clones the eclipse-edc/MinimumViableDataspace repository
    cmds:
      - git clone git@github.com:eclipse-edc/MinimumViableDataspace.git {{.MVD_DIR}}
      - cd {{.MVD_DIR}} && git reset --hard {{.MVD_COMMIT}}
    status:
      - test -d {{.MVD_DIR}}

  build-scripts-image:
    desc: Builds the Docker image used to run helper scripts
    dir: scripts
    cmds:
      - docker build -t {{.SCRIPTS_IMAGE}} .

  build-mvd:
    desc: Builds the MinimumViableDataspace project
    deps:
      - clone-mvd
    dir: "{{.MVD_DIR}}"
    cmds:
      - gradle build -x test
    status:
      - ls {{.USER_WORKING_DIR}}/{{.MVD_DIR}}/build/libs/*.jar

  build-mvd-connector:
    desc: Builds the MinimumViableDataspace connector
    deps:
      - clone-mvd
    vars:
      BUILD_MARK: "{{.USER_WORKING_DIR}}/{{.MVD_DIR}}/.build-connector.log"
    dir: "{{.MVD_DIR}}"
    cmds:
      - gradle -DuseFsVault="true" :launchers:connector:shadowJar
      - touch {{.BUILD_MARK}}
    status:
      - test -f {{.BUILD_MARK}}

  build-mvd-reg-svc:
    desc: Builds the MinimumViableDataspace registration service
    deps:
      - clone-mvd
    vars:
      BUILD_MARK: "{{.USER_WORKING_DIR}}/{{.MVD_DIR}}/.build-reg-svc.log"
    dir: "{{.MVD_DIR}}"
    cmds:
      - gradle -DuseFsVault="true" :launchers:registrationservice:shadowJar
      - touch {{.BUILD_MARK}}
    status:
      - test -f {{.BUILD_MARK}}

  build-mvd-all:
    desc: Builds all the artifacts of the MinimumViableDataspace
    cmds:
      - task: build-mvd
      - task: build-mvd-connector
      - task: build-mvd-reg-svc

  mvd-system-tests-up:
    desc: Starts the Compose stack of the MinimumViableDataspace
    deps:
      - build-mvd-all
      - clone-data-dashboard
    cmds:
      - docker compose --profile ui -f {{.MVD_DIR}}/system-tests/docker-compose.yml up -d --build
    status:
      - >
        test $(docker compose --profile ui -f {{.MVD_DIR}}/system-tests/docker-compose.yml ps --all --format json | 
        jq '.[] | select(.State == "exited")' | 
        jq '.Name' | 
        wc -l) -eq 1
      - >
        test $(docker compose --profile ui -f {{.MVD_DIR}}/system-tests/docker-compose.yml ps --all --format json | 
        jq '.[] | select(.State == "running")' | 
        jq '.Name' | 
        wc -l) -gt 0

  upload-test-doc:
    desc: Uploads a test document to the MinimumViableDataspace
    deps:
      - mvd-system-tests-up
    cmds:
      - >
        docker run --rm -it 
        --network host
        -v {{.USER_WORKING_DIR}}/{{.MVD_DIR}}:/mvd 
        -v {{.USER_WORKING_DIR}}/scripts:/scripts
        mcr.microsoft.com/azure-cli:2.48.1 
        /bin/bash /scripts/upload-test-doc.sh

  build-datacellar-connector:
    desc: Builds the Data Cellar connector
    dir: "{{.DC_CONNECTOR_DIR}}"
    cmds:
      - gradle clean build

  create-datacellar-certs:
    desc: Creates the certificates used by the Data Cellar connector
    deps:
      - build-scripts-image
    vars:
      KEY_ALIAS: "datacellar"
      KEY_PASSW: "datacellar"
    cmds:
      - mkdir -p {{.USER_WORKING_DIR}}/{{.DC_CERTS_DIR}}
      - >
        docker run --rm -it 
        -v {{.USER_WORKING_DIR}}/{{.DC_CERTS_DIR}}:/out 
        {{.SCRIPTS_IMAGE}}
        /bin/bash -c "OUT_DIR=/out KEY_ALIAS={{.KEY_ALIAS}} KEY_PASSW={{.KEY_PASSW}} ./create-certs.sh"
    status:
      - test -f {{.USER_WORKING_DIR}}/{{.DC_CERTS_DIR}}/*.pfx

  build-edcpy-image:
    desc: Builds the Docker image that contains the EDC Python SDK
    cmds:
      - docker build -t {{.EDCPY_IMAGE}} -f Dockerfile.edcpy .

  http-pull-sample-services-up:
    desc: Starts the Compose stack of the HTTP Pull sample
    deps:
      - build-datacellar-connector
      - create-datacellar-certs
    cmds:
      - docker compose -f docker-compose-http-pull.yml up -d --build --wait
      - sleep {{.HTTP_PULL_SERVICES_SLEEP}}

  run-http-pull-sample:
    desc: Runs the HTTP Pull sample
    deps:
      - build-edcpy-image
      - http-pull-sample-services-up
    cmds:
      - >
        docker run --rm -it 
        --network {{.HTTP_PULL_NETWORK}} 
        --env-file {{.USER_WORKING_DIR}}/.env.http-pull-sample
        {{.EDCPY_IMAGE}} 
        run-http-pull-sample

  datacellar-services-up:
    deps:
      - build-datacellar-connector
      - create-datacellar-certs
    cmds:
      - docker compose -f docker-compose-http-push.yml up -d --build --wait
      - sleep {{.HTTP_PULL_SERVICES_SLEEP}}
