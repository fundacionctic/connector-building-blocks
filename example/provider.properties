# We have observed that using different values for the "edc.ids.id" and "edc.participant.id" 
# properties may result in unexpected errors related to the token validation.
edc.participant.id=example-provider
edc.ids.id=example-provider

# Public hostname where the connector is reachable from the outside.
# Note that in this particular example we're using mDNS to resolve the hostname.
edc.hostname=provider.local

# Ports and base paths for the different HTTP endpoints of the connector.
# Please see the documentation of the Control and Management APIs for more information:
# https://app.swaggerhub.com/apis/eclipse-edc-bot/control-api/
# https://app.swaggerhub.com/apis/eclipse-edc-bot/management-api
web.http.port=9191
web.http.path=/api
web.http.management.port=9193
web.http.management.path=/management
web.http.protocol.port=9194
web.http.protocol.path=/protocol
web.http.public.port=9291
web.http.public.path=/public
web.http.control.port=9192
web.http.control.path=/control

# Based on the "edc.hostname", "web.http.protocol.port" and "web.http.protocol.path" properties.
edc.dsp.callback.address=http://provider.local:9194/protocol

# Control Plane - Transfer Pull HTTP Receiver:
# https://github.com/eclipse-edc/Connector/tree/main/extensions/control-plane/transfer/transfer-pull-http-receiver
edc.receiver.http.endpoint=http://provider.local:8000/pull

# Data Plane - Data Plane API:
# https://github.com/eclipse-edc/Connector/tree/main/extensions/data-plane/data-plane-api
edc.dataplane.token.validation.endpoint=http://localhost:9192/control/token

# Data Plane - Data Plane HTTP:
# https://github.com/eclipse-edc/Connector/tree/main/extensions/data-plane/data-plane-http
edc.dataplane.http.sink.partition.size=5

# This is a property for the "core-connector" extension found in this repository.
# It should point to the OpenAPI definition of the API that needs to be exposed by the connector.
eu.datacellar.openapi.url=http://provider.local:9090/openapi.json

# Configuration related to the certificate and private key of the connector
# that is used to sign the tokens that are sent to the data plane.
# Note that the certificates are generated dynamically during the provisioning of the connector.
edc.public.key.alias=publickey
edc.transfer.dataplane.token.signer.privatekey.alias=datacellar
edc.transfer.proxy.token.signer.privatekey.alias=datacellar
edc.transfer.proxy.token.verifier.publickey.alias=publickey

# OAuth2 configuration particularized for Keycloak.
# OpenID Endpoint Configuration as listed in the Realm Settings of Keycloak.
edc.oauth.token.url=http://keycloak.local:8080/realms/edc-example-realm/protocol/openid-connect/token
# The jwks_uri key from the JSON response of the OpenID Configuration endpoint.
edc.oauth.provider.jwks.url=http://keycloak.local:8080/realms/edc-example-realm/protocol/openid-connect/certs
# The Client ID of the Keycloak "Client" that represents this connector.
# We've observed that token validation fails when this is different from edc.participant.id and edc.ids.id.
edc.oauth.client.id=example-provider
# This audience claim is the one issued by default in the tokens issued 
# by Keycloak and depends on the hostname of the Keycloak instance.
edc.oauth.provider.audience=http://keycloak.local:8080/realms/edc-example-realm
# A new Client Scope needs to be created in the Keycloak realm.
# This scope should also include a Protocol Mapper of type "Audience".
# The Included Custom Audience parameter of the Protocol Mapper should match this property.
edc.oauth.endpoint.audience=http://keycloak.local:8080/realms/edc-example-realm
# These are the aliases from the keystore (edc.keystore) that contains the certificate and private key of the connector.
# The keystore should be imported into the Keycloak Client from the Keys section.
# The Client Credentials should be configured to use the "Signed JWT" Client Authenticator.
edc.oauth.certificate.alias=datacellar
edc.oauth.private.key.alias=datacellar
